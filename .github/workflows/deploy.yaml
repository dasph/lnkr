name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy

    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout üõéÔ∏è
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud üîë
      uses: google-github-actions/auth@v1.1.0
      with:
        credentials_json: '${{ secrets.GOOGLE }}'

    - name: Authenticate to Google Artifact Registry üîë
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ vars.LOCATION }}-docker.pkg.dev
        username: _json_key
        password: ${{ secrets.GOOGLE }}

    - name: Build and Push Container üèóÔ∏è
      run: |-
        REPO=${{ vars.LOCATION }}-docker.pkg.dev/${{ vars.PROJECT }}/${{ vars.REPOSITORY }}/${{ vars.SERVICE }}
        IMAGE=$REPO:${{ github.sha }}
        docker build -t $IMAGE \
          --build-arg FIREBASE=${{ secrets.FIREBASE }} \
          --build-arg AUTHORIZATION=${{ secrets.AUTHORIZATION }} ./
        docker tag $IMAGE $REPO:latest
        docker push $REPO:latest

    - name: Deploy to Cloud Run üöÄ
      uses: google-github-actions/deploy-cloudrun@v1.0.1
      with:
        service: ${{ vars.SERVICE }}
        region: ${{ vars.REGION }}
        image: ${{ vars.LOCATION }}-docker.pkg.dev/${{ vars.PROJECT }}/${{ vars.REPOSITORY }}/${{ vars.SERVICE }}:${{ github.sha }}

    - name: Cleanup Google Cloud Run üßπ
      run: |-
        REVISIONS=$(gcloud run revisions list --service=${{ vars.SERVICE }} --region=${{ vars.REGION }} --filter="status.conditions.status:'False'" --format='value(REVISION)')
        while read -r REVISION; do gcloud run revisions delete $REVISION --region=${{ vars.REGION }} --quiet; done <<< $REVISIONS

    - name: Cleanup Google Artifact Registry üßπ
      run: |-
        SERVICE=${{ vars.LOCATION }}-docker.pkg.dev/${{ vars.PROJECT }}/${{ vars.REPOSITORY }}/${{ vars.SERVICE }}
        DIGESTS=$(gcloud artifacts docker images list $SERVICE --sort-by=update_time --format='value(DIGEST)' | head -n -1)
        while read -r DIGEST; do gcloud artifacts docker images delete "$SERVICE@$DIGEST" --delete-tags --quiet; done <<< $DIGESTS
